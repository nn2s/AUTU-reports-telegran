#!/usr/bin/env python3
import asyncio
import random
import sqlite3
import logging
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.functions.contacts import BlockRequest
from telethon.errors import FloodWaitError, PeerFloodError
from telethon.network import ConnectionTcpAbridged
import os
import platform
from typing import List, Dict

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('reporter.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TurboReporterConfig:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π (–º–∏–Ω–∏–º—É–º 3 –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏)
        self.SESSIONS = [
            {
                'name': 'session1',
                'api_id': 123456,
                'api_hash': 'abcdef123456',
                'phone': '+1234567890',
                'proxy': None  # (host, port, secret) –¥–ª—è MTProto
            },
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏
        ]
        
        # –ü—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–± (Telegram API codes)
        self.REASONS = {
            1: "–°–ø–∞–º",
            2: "–ù–∞—Å–∏–ª–∏–µ",
            3: "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
            4: "–§–µ–π–∫",
            8: "–î—Ä—É–≥–æ–µ"
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.MIN_DELAY = 15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        self.MAX_DELAY = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        self.MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        self.CONCURRENT_TASKS = 5  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á

class TurboReporter:
    def __init__(self, config: TurboReporterConfig):
        self.config = config
        self.clients: List[TelegramClient] = []
        self.db = self.init_db()
        self.lock = asyncio.Lock()
        self.semaphore = asyncio.Semaphore(self.config.CONCURRENT_TASKS)

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        db = sqlite3.connect('reports.db', check_same_thread=False)
        db.execute('''CREATE TABLE IF NOT EXISTS reports
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      username TEXT UNIQUE,
                      status TEXT,
                      reason TEXT,
                      session TEXT,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        db.commit()
        return db

    async def init_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram"""
        for session in self.config.SESSIONS:
            try:
                client = TelegramClient(
                    session['name'],
                    session['api_id'],
                    session['api_hash'],
                    connection=ConnectionTcpAbridged,
                    proxy=session.get('proxy')
                )
                
                await client.start(phone=session['phone'])
                self.clients.append(client)
                logger.info(f"–°–µ—Å—Å–∏—è {session['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session['name']}: {str(e)}")

    async def safe_report(self, client: TelegramClient, username: str, reason: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            user = await client.get_entity(username)
            
            await client(ReportRequest(
                peer=user,
                reason=[reason],
                message="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∂–∞–ª–æ–±–∞"
            ))
            
            await client(BlockRequest(user))
            return True
            
        except FloodWaitError as e:
            wait = e.seconds + random.randint(5, 15)
            logger.warning(f"–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å: –∂–¥–µ–º {wait} —Å–µ–∫.")
            await asyncio.sleep(wait)
            return False
            
        except PeerFloodError:
            logger.error("–õ–∏–º–∏—Ç –∂–∞–ª–æ–± –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è @{username}: {str(e)}")
            return False

    async def process_target(self, username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.semaphore:
            for attempt in range(self.config.MAX_RETRIES):
                client = random.choice(self.clients)
                reason = random.choice(list(self.config.REASONS.keys()))
                
                success = await self.safe_report(client, username, reason)
                
                if success:
                    async with self.lock:
                        self.db.execute(
                            "INSERT OR IGNORE INTO reports (username, status, reason, session) VALUES (?, ?, ?, ?)",
                            (username, 'reported', self.config.REASONS[reason], client.session.filename)
                        )
                        self.db.commit()
                    logger.info(f"–£—Å–ø–µ—Ö: @{username} | –ü—Ä–∏—á–∏–Ω–∞: {self.config.REASONS[reason]}")
                    break
                    
                await asyncio.sleep(random.uniform(self.config.MIN_DELAY, self.config.MAX_DELAY))
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å @{username} –ø–æ—Å–ª–µ {self.config.MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫")

    async def run(self, targets: List[str]):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        await self.init_clients()
        
        if not self.clients:
            logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
            return
            
        tasks = [self.process_target(target) for target in targets]
        await asyncio.gather(*tasks)

class TelegramReporterBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–º"""
    def __init__(self, reporter: TurboReporter):
        self.reporter = reporter
        self.bot = TelegramClient('reporter_bot', reporter.config.SESSIONS[0]['api_id'], 
                                reporter.config.SESSIONS[0]['api_hash'])
        
    async def start(self):
        await self.bot.start(bot_token='YOUR_BOT_TOKEN')
        
        @self.bot.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            await event.respond(
                "üõ°Ô∏è *Turbo Reporter*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä @username)\n"
                "–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º username'–æ–≤",
                parse_mode='md'
            )
        
        @self.bot.on(events.NewMessage)
        async def message_handler(event):
            if event.file:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
                pass
            else:
                await self.process_username(event, event.text.strip('@'))
        
        await self.bot.run_until_disconnected()
    
    async def process_username(self, event, username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await event.respond(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É @{username}...")
            await self.reporter.process_target(username)
            await event.respond(f"‚úÖ @{username} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    config = TurboReporterConfig()
    reporter = TurboReporter(config)
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # bot = TelegramReporterBot(reporter)
    # asyncio.create_task(bot.start())
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    with open('targets.txt') as f:
        targets = [line.strip() for line in f if line.strip()]
    
    await reporter.run(targets)

if __name__ == "__main__":
    # –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if platform.system() == 'Windows':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    asyncio.run(main())
